album.java
==================================

package diagnostic;
import java.util.ArrayList;

public class Album {

	ArrayList<Songs> songList = new ArrayList<Songs>();
	
	//add songs to the list
	
	public void addSongToList(Songs song)
	{
		songList.add(song);
	}
	
	//remove song from list
	
	public void removeSongsFromList(Songs song)
	{
		songList.remove(song);
	}
	
	//constructor for album
	
	Album()
	{
		
	}
	
	//search for a given song
	
	public void searchForSong(String titleOfSong)
	{
		
			for(Songs tempSong : songList)
		
		   {
			if (tempSong.getSongTitle().equals(titleOfSong))
			{
				System.out.println("Song you searched for is: " +titleOfSong+ " duration of song is: " +tempSong.getSongDuration()+ " singer is : " +tempSong.getSinger());
				
			}
			else
			{
				//throw new NullPointerException("the song searched is not available");
			}
		   }
		
	
		
	}
	
	// method to find total songs in the arrayList
	
	public int findTotalNoOfSongs()
	{
		int totalSongs = 0;
		totalSongs = songList.size();
		
		if(totalSongs == 0) 
		{
			throw new NullPointerException("no song found");
		}
		return totalSongs;
	}
	
	//return song with duration less than 6 minutes
	
	public String songDurationLessThanSixMinutes()
	{
		String currentSong = null;
		for(Songs tempSong : songList)
		{
			if (tempSong.getSongDuration() < 6.00)
			{
				currentSong = tempSong.getSongTitle();
			}
			
		}
		return currentSong;
	}
	
	//method to find title of song by a particular singer
	
	public String findSongOfSinger(String singer) throws Songnotfoundexception
	{
		String songTitle = null;
		for(Songs tempSong : songList)
		{
			if(tempSong.getSinger().equals(singer))
			{
				songTitle = tempSong.getSinger();
				
			}
			else
			{
				throw new Songnotfoundexception();
			}
		}
		return songTitle;
	}
}



songnotfoundexception.java
==========================================

package diagnostic;

public class Songnotfoundexception extends Exception {

	
	private static final long serialVersionUID = 1L;
	
	Songnotfoundexception()
	{
		super("Song/singer searched for is not available");
	}
	

}

songs.java
==============================================

package diagnostic;

public class Songs {
	private String songTitle ;
	private double songDuration;
	private String singer;
	
	//constructor
	
	Songs(String songTitle, double songDuration, String singer)
	{
		this.songTitle = songTitle;
		this.songDuration = songDuration;
		this.singer = singer;
	}

	//getter and setter
	
	public String getSongTitle() {
		return songTitle;
	}

	public void setSongTitle(String songTitle) {
		this.songTitle = songTitle;
	}

	public double getSongDuration() {
		return songDuration;
	}

	public void setSongDuration(int songDuration) {
		this.songDuration = songDuration;
	}

	public String getSinger() {
		return singer;
	}

	public void setSinger(String singer) {
		this.singer = singer;
	}
	
	
	
	

}

testclass.java
===========================================================

package diagnostic;
//import java.util.ArrayList;

public class Testclass {

	
	public static void main(String[] args) {
	
		//static ArrayList<Songs> 
		//creating new songs objects
		
		Songs newSong1 = new Songs("tere bin", 4.50, "atif");
		Songs newSong2 = new Songs("inter. villager", 6.00, "Yo-Yo Honey Singh");
		Songs newSong3 = new Songs("jeene laga", 6.50, "atif");
		Songs newSong4 = new Songs("yaariyan", 3.30, "Amrinder");
		Songs newSong5 = new Songs("paradise", 6.00, "coldplay");
		Songs newSong6 = new Songs("walk", 6.30, "pantera");
		
		Album newAlbum = new Album();
		
		//adding songs to the list
		
		newAlbum.addSongToList(newSong1);
		newAlbum.addSongToList(newSong2);
		newAlbum.addSongToList(newSong3);
		newAlbum.addSongToList(newSong4);
		newAlbum.addSongToList(newSong5);
		newAlbum.addSongToList(newSong6);
		
	
		System.out.println("SOngs less than 6 min are : " +newAlbum.songDurationLessThanSixMinutes());	
		
		System.out.println();
		System.out.println();
		System.out.println();
		newAlbum.searchForSong("walk");
		
		System.out.println();
		System.out.println();
		
		try {
			System.out.println("Song of singer Atif aslam is: " +newAlbum.findSongOfSinger("Amrinder"));
		} catch (Songnotfoundexception e) {
			
			e.printStackTrace();
		}
		
		System.out.println("total no of songs in list are : " +newAlbum.findTotalNoOfSongs());
		
		

	}

}




SQL QUESTION
===========================



Tables

Employee_311205


emp_no             int                      PRIMARY KEY,
emp_name    varchar(20),
hire_date          date                      NOT NULL,
emp_sal            int,
emp_comm      int,
job_no             int,                    REFERENCES Job_311205(job_no),
dept_no           int,                    REFERENCES Dept_311205(dept_no)



Job_311205

job_no            int             PRIMARY KEY,
job_name    varchar(20)

Dept_311205

dept_no         int               PRIMARY KEY,
dept_name  varchar(20)





Write Queries to 

1. Display the department number and number of clerks in each department.
2. Display the department name, total salary payout and total commission payout for each department.
3. Display a list of all departments with the employees in each department.
4. Display average salary of employees in each department with department name
5. Display number of 'analyst' working in each department with department names
6. Display the department names in the ascending order of maximum amount of commision each department 
7. Display all the job names having average of salary greater than 25000
8. Display name.department name and job of those employee who has salary greater than 'Trevor Hayes '
9. Display the names and job titles of all employees with the same job as 'Rahim Huber'

===============================================================================================================


